import { Organism } from '../src/neat/Organism';
import { NodeGene } from '../src/neat/NodeGene';
import { ConnectionGene } from '../src/neat/ConnectionGene';
import { Population } from '../src/neat/Population';
import { DefaultConfig } from '../src/Config';
import Network from '../src/network/Network';
import { NodeType } from '../src/types';

const map = `
###############################################################################################################
###############                                                                                 ###############
###########                                                                                         ###########
########                                                                                               ########
######            ###########################################################################            ######
#####         ###################################################################################         #####
####       #########################################################################################       ####
####     #############################################################################################     ####
###     ###############################################################################################     ###
###     ###############################################################################################     ###
###    #################################################################################################    ###
##     #################################################################################################     ##
##     #################################################################################################     ##
##    ###################################################################################################    ##
##    ###################################################################################################    ##
#     ###################################################################################################     #
#     ###################################################################################################     #
#    #####################################################################################################    #
#    #####################################################################################################    #
#    #####################################################################################################    #
#    #####################################################################################################    #
#    #####################################################################################################    #
#    #####################################################################################################    #
#    #####################################################################################################    #
#    #####################################################################################################    #
#     ###################################################################################################     #
#     ###################################################################################################     #
##    ###################################################################################################    ##
##    ###################################################################################################    ##
##     #################################################################################################     ##
##     #################################################################################################     ##
###    #################################################################################################    ###
###     ###############################################################################################     ###
###     ###############################################################################################     ###
####     #############################################################################################     ####
####       #########################################################################################       ####
#####         ###################################################################################         #####
######            ###########################################################################            ######
########                                       |                                                       ########
###########                                    |X                                                   ###########
###############                                |                                                ###############
###############################################################################################################
`;

const isInside = (x: number, y: number, xMax: number, yMax: number) =>
    x >= 0 && y >= 0 && x < xMax && y < yMax;

class Engine {
    matrix: Array<Array<string>>;
    car = {
        x: 0,
        y: 0,
        vx: 0,
        vy: 0,
        traveled: 0,
        stopped: 0
    };
    start = { x: 0, y: 0 };

    constructor() {
        this.matrix = map
            .trim()
            .split('\n')
            .map(row => row.split(''));

        this.matrix.some((row, y) => {
            return row.some((col, x) => {
                if (col === 'X') {
                    this.car.x = x;
                    this.car.y = y;

                    this.start = { x, y };
                    this.matrix[y][x] = ' ';

                    return true;
                }

                return false;
            });
        });
    }

    reset() {
        this.car = {
            ...this.start,
            stopped: 0,
            traveled: 0,
            vx: 0,
            vy: 0
        };
    }

    render() {
        console.clear();
        const { x, y } = this.car;
        const matrix = [...this.matrix.map(row => [...row])];
        matrix[y][x] = 'X';
        console.log(matrix.map(row => row.join('')).join('\n'));
    }

    step(fn: any) {
        const car = this.car;

        const [ax, ay] = fn({ ...this.matrix }, { ...car });

        car.vx += ax;
        car.vy += ay;

        if (!car.vx && !car.vy) {
            car.stopped++;
        } else {
            car.stopped = 0;
        }

        console.log('\nCar:', car);

        const { x, y } = car;

        car.x += car.vx;
        car.y += car.vy;
        car.traveled += Math.sqrt(car.vx ** 2 + car.vy ** 2);

        if (car.stopped >= 5) return false;

        if (!isInside(x, y, this.matrix[0].length, this.matrix.length)) {
            return false;
        }

        if (this.matrix[y][x] === '#') {
            return false;
        }

        return true;
    }
}

function initializePopulation(config) {
    const nodes: any = [],
        connections: any = [];

    const inputs = [
        [NodeType.Input, 'Vx'],
        [NodeType.Input, 'Vy'],
        [NodeType.Input, 'Sf'],
        [NodeType.Input, 'Sl'],
        [NodeType.Input, 'Sr']
    ];

    const outputs = [[NodeType.Output, 'Ax'], [NodeType.Output, 'Ay']];

    outputs.forEach(([type, id]: any) => {
        let node = new NodeGene(type, id);
        nodes.push(node);
    });

    inputs.forEach(([type, id]: any) => {
        let node = new NodeGene(type, id);
        nodes.push(node);
        outputs.forEach((o: any) => {
            connections.push(
                new ConnectionGene(config.innovation.next().value, node, o)
            );
        });
    });

    return Population.from(config, { nodes, connections });
}

let engine = new Engine();
let ai = initializePopulation({
    ...DefaultConfig
});

const sleep = async (n: number) =>
    await new Promise(resolve => setTimeout(resolve, n));

function getFitness(network: Network) {
    engine.reset();
    return new Promise<number>((resolve, reject) => {
        let result;
        do {
            engine.render();
            result = engine.step((_: any, car: any) => {
                network.activate([car.vx, car.vy, 1, 1, 1]);
            });
        } while (result);

        resolve(engine.car.traveled);
    });
}

ai.run(getFitness, 100, 100);

// class CarAI extends Evaluator {
//     initializePopulation() {}
// }
